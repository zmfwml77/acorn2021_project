<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- 
		JNDI 데이터 소스 객체 얻어오는 설정   
		Servers/context.xml 에 설정된 oracle 접속정보 가 있어야 된다. 
		 
		<Resource name="jdbc/myoracle" auth="Container"
              type="javax.sql.DataSource" driverClassName="oracle.jdbc.OracleDriver"
              url="jdbc:oracle:thin:@127.0.0.1:1521:xe"
              username="scott" password="tiger" maxTotal="20" maxIdle="10"
              maxWaitMillis="-1"/>    		
	-->
	<beans:bean id="dataSource" 
		class="org.springframework.jndi.JndiObjectFactoryBean">
		<beans:property name="jndiName" value="java:comp/env/jdbc/myoracle"/>
	</beans:bean>
	<!-- 
		위는 아래의 코드와 같다
		dataSource = new JndiObjectFactoryBean();
		dataSource.setJndiName("java:comp/env/jdbc/myoracle");
	 -->
	
	
	<!-- SqlSessionFactory 객체 -->
	<beans:bean id="sessionFactory" 
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"/>
		<beans:property name="configLocation"
	value="classpath:com/my/insta/mybatis/Configuration.xml"/>
	</beans:bean>
	<!-- 
		sessionFactory=new SqlSessionFactoryBean();
		sessionFactory.setDataSource(dataSource);
		sessionFactory.setConfigLocation("classpath:com/gura/xxx");
	 -->
	

	<!-- 
		SqlSession 인터페이스를 구현한 
		SqlSessionTemplate(SqlSession) 객체 
		Dao 가 의존하는 객체 
	-->
	<beans:bean class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg name="sqlSessionFactory" 
			ref="sessionFactory"/>
	</beans:bean>
	<!-- 
		new SqlSessionTemplate(sessionFactory);
	 -->
	 	
	 <!-- Multipart 폼 전송 처리를 위한 bean 설정 -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="102400000"/>
	</beans:bean>

	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	<!-- 
		[ Spring Bean Container 에서 관리할 객체를 생성할 클래스를 찾기 ]
		찾아지면 알아서 객체를 종류별로 1개(single ton)만 생성해서 관리한다.
		관리 한다는 의미는 필요한곳에 DI(의존성 주입)을 해준다는 의미이다. 
		
		클래스 위에 @Controller, @Service, @Repository, @Component ... 등등
		의 어노테이션을 붙여놓으면 component scan 할때 인식이 되어서 
		객체가 자동 생성되고 container 에서 관리가 된다. 
		
		base-package="scan 할 페키지명"
		
		페키지명을 명시하면 하위 페키지 까지 알아서 다 scan 한다. 
	 -->
	<context:component-scan base-package="com.my.insta" />
	
	
	
</beans:beans>
